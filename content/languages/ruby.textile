---
title: Ruby
kind: guide
---

h1. Ruby

h2. Implementations

The Ruby language exists outside of any specific implementation in the same way that the definition of a word exists outside of any specific dictionary or the concept of monumemental hair styles exists outside of Donald Trump. The main implementations are covered below.

h3. MRI (Matz Ruby Interpreter)

MRI is the official language implementation. "Yukihiro Matsumoto":http://en.wikipedia.org/wiki/Yukihiro_Matsumoto , Ruby's creator, and the "Ruby core team":http://rubycoreteam.heroku.com/ implement new versions of the language in MRI.

It's best to use the MRI implementation of Ruby 1.9.3 unless you have a specific need to use another implementation. This is not to disparage JRuby or Rubinius, which both have their advantages. Rather, it's a recognition of the fact that if you use JRuby or Rubinius it's easier to confuse implementation-specific issues with issues related to the language itself.

By using the latest version and the official implementation you'll learn the latest Ruby techniques and avoid compatibility issues which can be difficult to pinpoint and fix.

h3. JRuby

"JRuby":http://jruby.org/ is a ruby implementation built on the JVM. It's known for its efficiency and for its ability to leverage other JVM libraries.

h3. Rubinius

"Rubinius":http://rubini.us/ is Ruby built in Ruby. From its home page:

bq.. The Rubinius bytecode virtual machine is written in C++, incorporating LLVM to compile bytecode to machine code at runtime. The bytecode compiler and vast majority of the core classes are written in pure Ruby.

To interact with the rest of the system, the VM provides primitives which can be attached to methods and invoked. Additionally, FFI provides a direct call path to most C functions.

Rubinius uses a precise, compacting, generational garbage collector. It includes a compatible C-API for C extensions written for the standard Ruby interpreter (often referred to as MRIâ€”Matz's Ruby Implementation).

h2. Versions

A Ruby version refers to two thing: a set of syntax and semantics, and the state of the MRI at a point in time. So, for example, when the Rubinius team says that Rubinius targets Ruby 1.8.7, it means that a program using 1.8.7's syntax and semantics should behave the same way in Rubinius as it does in MRI.

At the same time, new versions of Ruby also incorporate changes not related to the language in itself, like improvements to garbage collection.

There are two versions of Ruby primarily used today: 1.8.7 and 1.9.3 . As mentioned above, it's best to start learning using 1.9.3.

h3. Ruby Version Management

Rubyists have developed tools to improve the process of installing Ruby and switching between versions. There are some differences between the tools, but at the end of the day they allow you to:

* Change the global Ruby version
* Specify the Ruby version per-project
* Install Ruby

The two main tools are "rvm":https://rvm.io//rvm/install/ and "rbenv":https://github.com/sstephenson/rbenv / "ruby-build":https://github.com/sstephenson/ruby-build. Both have very good documentation.

h2. Debugging

"Ruby Debug in 30 Seconds":http://pivotallabs.com/users/chad/blog/articles/366-ruby-debug-in-30-seconds-we-don-t-need-no-stinkin-gui

Use "ruby-debug" with MRI 1.8 and "ruby-debug19" in MRI 1.9 .

h2. Package Management - Ruby Gems

http://docs.rubygems.org/read/book/1

h3. Installing

h3. Upgrading

h3. Using

h3. Developing

* Jeweler
* Hoe
* Bundler

h3. Dependency Management

"Bundler":http://gembundler.com/v1.1/index.html is the canonical tool for managing Ruby gem dependencies. Before bundler, it was difficult to specify exactly which versions of a gem should be used and to ensure that the gems you load wouldn't load a conflicting gem. If you ever run into a problem where Ruby throws an error along the lines of, "can't activate activerecord (= 2.0.2), already activated activerecord-1.15.3", then Bundler will help you solve that problem.

h2. Running a Standalone Program

h3. Compiling

h3. Allowing others to (easily) install it

h2. Interacting with the operating system

h3. IO

h3. Shelling out

h2. Social resources

h3. Mailing lists

h3. Forums

h3. User groups

h2. Testing

h3. Test::Unit

h3. RSpec

h3. Cucumber

h3. Steak

h2. Editing environments

h3. Emacs

h3. Textmate

h3. Sublime

h3. Vim
